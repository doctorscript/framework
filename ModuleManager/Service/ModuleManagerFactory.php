<?phpnamespace DoctorScript\ModuleManager\Service;use DoctorScript\ServiceManager\ServiceFactoryInterface;use DoctorScript\ServiceManager\ServiceLocatorInterface;use DoctorScript\ModuleManager\ModuleManagerInterface;use DoctorScript\ModuleManager\ModuleManager;use DoctorScript\Autoloader\StandardAutoloader;use DoctorScript\Cache\Adapter\FileSystem;class ModuleManagerFactory implements ServiceFactoryInterface{    /**     * Create module manager and inject appropriate dependencies     *     * @param  ServiceLocatorInterface $serviceLocator     * @return ModuleManagerInterface;    */    public function createService(ServiceLocatorInterface $serviceLocator)    {        $appConfig = $serviceLocator->get('ApplicationConfig');        $moduleManagerConfig = isset($appConfig['module_manager']) ? $appConfig['module_manager'] : [];        $moduleManager = new ModuleManager($moduleManagerConfig);        $moduleManager->setAutoloader(new StandardAutoloader());        return $moduleManager;    }}
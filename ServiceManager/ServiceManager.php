<?phpnamespace DoctorScript\ServiceManager;class ServiceManager implements ServiceLocatorInterface{    /**     * Services list     *     * @var array    */    protected $services = [];        /**     * Services cache     *     * @var array    */    protected $cache = [];        /**     * Constructor     *     * Setting defined services     * @param array $services    */        public function __construct(array $services = [])    {        if (count($services) > 0) {            $this->setServices($services);        }    }        /**     * Set services     *     * @param  array $services     * @return void    */    public function setServices(array $services)    {        $this->services = $services;    }        /**     * Add new service     *     * @param  string $name     * @param  mixed $service     * @param  bool $allowOverride     * @throws \BadMethodCallException     * @return void    */    public function addService($name, $service, $allowOverride = false)    {        if ($this->has($name) && $allowOverride !== true) {            throw new \BadMethodCallException(                sprintf('Cannot override %s service', $name)            );        }        $this->services[$name] = $service;    }        /**     * Check if service exists     *      * @param  string $serviceName     * @return bool true if service exists or false otherwise        */    public function has($serviceName)    {        return array_key_exists($serviceName, $this->services);    }    /**     * Get service by name     *     * @param  string $serviceName service name     * @param  bool $useCache     * @return mixed    */    public function get($serviceName, $useCache = true)    {        if(!$this->has($serviceName)){            throw new Exception\ServiceNotFoundException(                sprintf('Service %s not found', $serviceName)            );        }        if($useCache === true && array_key_exists($serviceName, $this->cache)){            return $this->cache[$serviceName];        }        $service = $this->services[$serviceName];        if (is_string($service) && class_exists($service)) {            $service = new $service;            if ($service instanceOf ServiceFactoryInterface) {                $service = $service->createService($this);            }                        if ($service instanceOf ServiceLocatorAwareInterface) {                $service->setServiceLocator($this);            }        }        if (!is_object($service) && !is_array($service)) {            throw new Exception\InvalidServiceTypeException(sprintf(                'Service must return object or array, %s return', gettype($service)            ));        }        $this->cache[$serviceName] = $service;        return $service;    }}
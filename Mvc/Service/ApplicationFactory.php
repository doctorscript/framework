<?phpnamespace DoctorScript\Mvc\Service;use DoctorScript\ServiceManager\ServiceFactoryInterface;use DoctorScript\ServiceManager\ServiceLocatorInterface;use DoctorScript\EventManager\EventManager;use DoctorScript\EventManager\EventManagerInterface;use DoctorScript\Mvc\ApplicationInterface;use DoctorScript\Mvc\Application;class ApplicationFactory implements ServiceFactoryInterface{    /**     * Create application instance and inject appropriate dependencies     *     * @param  ServiceLocatorInterface $serviceLocator     * @return ApplicationInterface    */    public function createService(ServiceLocatorInterface $serviceLocator)    {        $application = new Application();        $event = $serviceLocator->get('DoctorScript\Mvc\Service\MvcEventFactory');        $event->setApplication($application);                $eventManager = new EventManager(['DoctorScript\Mvc\ApplicationInterface']);        $eventManager->setEvent($event);        $this->attachDefaultListeners($eventManager);        $application->setEventManager($eventManager);        $application->setServiceManager($serviceLocator);        $application->setModuleManager($serviceLocator->get('DoctorScript\ModuleManager\ModuleManagerInterface'));        $application->setRouter($serviceLocator->get('DoctorScript\Router\RouterInterface'));                return $application;    }        /**     * Attach application default listeners     *     * @param  EventManagerInterface     * @return void    */    public function attachDefaultListeners(EventManagerInterface $eventManager)    {        $event = $eventManager->getEvent();                $eventManager->attach($event::EVENT_ROUTE, 'DoctorScript\Mvc\Listener\OnRoute', -1000);        $eventManager->attach($event::EVENT_PARSE_ACTION_RESULT, 'DoctorScript\Mvc\Listener\OnParseActionResult', -1000);    }}
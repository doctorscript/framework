<?phpnamespace DoctorScript\Mvc\Controller;use DoctorScript\ServiceManager\ServiceManager;use DoctorScript\ServiceManager\ServiceLocatorAwareInterface;use DoctorScript\ServiceManager\ServiceLocatorInterface;use DoctorScript\ServiceManager\Plugin\PluginCapableInterface;use DoctorScript\Mvc\Controller\ControllerInterface;class ControllerManager extends ServiceManager implements ServiceLocatorAwareInterface{        /**     * @var array    */    protected $services = [];        /**     * Service locator implementation instance     *     * @var $serviceLocator    */    private $serviceLocator;    /**     * Set service locator implementation     *     * @param ServiceLocatorInterface $serviceLocator     * @return void    */    public function setServiceLocator(ServiceLocatorInterface $serviceLocator)    {        $this->serviceLocator = $serviceLocator;    }    /**     * Get service locator implementation     *     * @return ServiceLocatorInterface    */    public function getServiceLocator()    {        return $this->serviceLocator;    }    /**     * Inject controller standard dependencies     * Standard dependencies include MvcEvent, RequestInterface, ResponseInterface and controller plugin manager     *     * @param  ControllerInterface $controller     * @return void    */    public function injectControllerDependencies(ControllerInterface $controller)    {        $serviceLocator = $this->getServiceLocator();                $controller->setEvent($serviceLocator->get('DoctorScript\Mvc\Service\MvcEventFactory'));        $controller->setRequest($serviceLocator->get('DoctorScript\Http\Request\RequestInterface'));        $controller->setResponse($serviceLocator->get('DoctorScript\Http\Response\ResponseInterface'));        $controller->setPluginManager($serviceLocator->get('DoctorScript\Mvc\Controller\PluginManager'));    }}